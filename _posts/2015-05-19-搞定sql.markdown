---
layout: post
---

<h2>{{ page.title }}</h2>
<p class='meta'>{{ page.date | date_to_string }} - NanJing</p>

---

[sql在线练习](http://sqlfiddle.com/#!2/b649d/23)  
{% highlight sql %}
DROP TABLE IF EXISTS `users`;CREATE TABLE `users` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `uid` bigint(20) DEFAULT NULL,  `name` varchar(255) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8; -- ------------------------------ Records of users-- ----------------------------INSERT INTO `users` VALUES ('1','001', '小明');INSERT INTO `users` VALUES ('2', '002','小虎');INSERT INTO `users` VALUES ('3','003', '小dfg');INSERT INTO `users` VALUES ('4','004', '小dss');INSERT INTO `users` VALUES ('5','005', '小ww');INSERT INTO `users` VALUES ('6','006', '小wq');-- ------------------------------ Table structure for scores-- ----------------------------DROP TABLE IF EXISTS `scores`;CREATE TABLE `scores` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `uid` bigint(20) DEFAULT NULL,  `score` decimal(10,0) DEFAULT NULL,  `type` varchar(255) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8; -- ------------------------------ Records of scores-- ----------------------------INSERT INTO `scores` VALUES ('1', '002', '160', '语文');INSERT INTO `scores` VALUES ('2', '002', '200', '数学');INSERT INTO `scores` VALUES ('3', '003', '150', '语文');INSERT INTO `scores` VALUES ('4', '004', '110', '数学');  
 -- select name,score from users,scores where users.uid=scores.uid and name="小虎"; -- select type,score from scores where uid in (select uid from users where name="小虎");-- select name,sum(score)as TotalScore from users,scores where users.uid=scores.uid group by name order by TotalScore desc;
{% endhighlight %}


http://m.jb51.net/article/30655.htm  
在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用。
{% highlight sql %}
create table school(  
id int unsigned primary key auto_increment,  
Sno char(6),  
Snamegetter varchar(64) not null,  
Sage tinyint default 0,  
Ssex enum('F','M')  
)  
insert into tb_admin(name,pwd) values('tsoft','111');  
delete from friends where user_name = 'simaopig';  
update w_hospital set search_flag='Y'  
添加列：alter table 表名 add column 列名 varchar(30);  
删除列：alter table 表名 drop column 列名;  
  
Student(S#,Sname,Sage,Ssex) 学生表

Course(C#,Cname,T#) 课程表

SC(S#,C#,score) 成绩表

Teacher(T#,Tname) 教师表



问题：

1、查询“”课程比“”课程成绩高的所有学生的学号；

SELECT a.S# FROM (SELECT s#,score FROM SC WHERE C#='001') a,(SELECT s#,score 

FROM SC WHERE C#='002') b 

WHERE a.score>b.score AND a.s#=b.s#; 

2、查询平均成绩大于分的同学的学号和平均成绩；

SELECT S#,avg(score) 

FROM sc 

GROUP BY S# having avg(score) >60; 

3、查询所有同学的学号、姓名、选课数、总成绩；

SELECT Student.S#,Student.Sname,count(SC.C#),sum(score) 

FROM Student left Outer JOIN SC on Student.S#=SC.S# 

GROUP BY Student.S#,Sname 

4、查询姓“李”的老师的个数；

SELECT count(distinct(Tname)) 

FROM Teacher 

WHERE Tname like '李%'; 

5、查询没学过“叶平”老师课的同学的学号、姓名；

SELECT Student.S#,Student.Sname 

FROM Student 

WHERE S# not in (SELECT distinct( SC.S#) FROM SC,Course,Teacher WHERE SC.C#=Course.C# AND Teacher.T#=Course.T# AND Teacher.Tname='叶平'); 

6、查询学过“”并且也学过编号“”课程的同学的学号、姓名；

SELECT Student.S#,Student.Sname FROM Student,SC WHERE Student.S#=SC.S# AND SC.C#='001'and exists( SELECT * FROM SC as SC_2 WHERE SC_2.S#=SC.S# AND SC_2.C#='002'); 

7、查询学过“叶平”老师所教的所有课的同学的学号、姓名；

SELECT S#,Sname 

FROM Student 

WHERE S# in (SELECT S# FROM SC ,Course ,Teacher WHERE SC.C#=Course.C# AND Teacher.T#=Course.T# AND Teacher.Tname='叶平' GROUP BY S# having count(SC.C#)=(SELECT count(C#) FROM Course,Teacher WHERE Teacher.T#=Course.T# AND Tname='叶平')); 

8、查询课程编号“”的成绩比课程编号“”课程低的所有同学的学号、姓名；

SELECT S#,Sname FROM (SELECT Student.S#,Student.Sname,score ,(SELECT score FROM SC SC_2 WHERE SC_2.S#=Student.S# AND SC_2.C#='002') score2 

FROM Student,SC WHERE Student.S#=SC.S# AND C#='001') S_2 WHERE score2 <score; 

9、查询所有课程成绩小于分的同学的学号、姓名；

SELECT S#,Sname 

FROM Student 

WHERE S# not in (SELECT Student.S# FROM Student,SC WHERE S.S#=SC.S# AND score>60); 

10、查询没有学全所有课的同学的学号、姓名；

SELECT Student.S#,Student.Sname 

FROM Student,SC 

WHERE Student.S#=SC.S# GROUP BY Student.S#,Student.Sname having count(C#) <(SELECT count(C#) FROM Course); 

11、查询至少有一门课与学号为“”的同学所学相同的同学的学号和姓名；

SELECT S#,Sname FROM Student,SC WHERE Student.S#=SC.S# AND C# in SELECT C# FROM SC WHERE S#='1001'; 

12、查询至少学过学号为“”同学所有一门课的其他同学学号和姓名；

SELECT distinct SC.S#,Sname 

FROM Student,SC 

WHERE Student.S#=SC.S# AND C# in (SELECT C# FROM SC WHERE S#='001'); 

13、把“SC”表中“叶平”老师教的课的成绩都更改为此课程的平均成绩；

update SC set score=(SELECT avg(SC_2.score) 

FROM SC SC_2 

WHERE SC_2.C#=SC.C# ) FROM Course,Teacher WHERE Course.C#=SC.C# AND Course.T#=Teacher.T# AND Teacher.Tname='叶平'); 

14、查询和“”号的同学学习的课程完全相同的其他同学学号和姓名；

SELECT S# FROM SC WHERE C# in (SELECT C# FROM SC WHERE S#='1002') 

GROUP BY S# having count(*)=(SELECT count(*) FROM SC WHERE S#='1002'); 

15、删除学习“叶平”老师课的SC表记录；

Delect SC 

FROM course ,Teacher 

WHERE Course.C#=SC.C# AND Course.T#= Teacher.T# AND Tname='叶平'; 

16、向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“”课程的同学学号、、

号课的平均成绩；

Insert SC SELECT S#,'002',(SELECT avg(score) 

FROM SC WHERE C#='002') FROM Student WHERE S# not in (SELECT S# FROM SC WHERE C#='002'); 

17、按平均成绩从高到低显示所有学生的“数据库”、“企业管理”、“英语”三门的课程成绩，按如下形式显示：学生ID,,数据库,企业管理,英语,有效课程数,有效平均分

SELECT S# as 学生ID 

,(SELECT score FROM SC WHERE SC.S#=t.S# AND C#='004') AS 数据库

,(SELECT score FROM SC WHERE SC.S#=t.S# AND C#='001') AS 企业管理

,(SELECT score FROM SC WHERE SC.S#=t.S# AND C#='006') AS 英语

,COUNT(*) AS 有效课程数, AVG(t.score) AS 平均成绩

FROM SC AS t 

GROUP BY S# 

ORDER BY avg(t.score) 

18、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分

SELECT L.C# As 课程ID,L.score AS 最高分,R.score AS 最低分

FROM SC L ,SC AS R 

WHERE L.C# = R.C# AND 

L.score = (SELECT MAX(IL.score) 

FROM SC AS IL,Student AS IM 

WHERE L.C# = IL.C# AND IM.S#=IL.S# 

GROUP BY IL.C#) 

AND 

R.Score = (SELECT MIN(IR.score) 

FROM SC AS IR 

WHERE R.C# = IR.C# 

GROUP BY IR.C# 

); 

19、按各科平均成绩从低到高和及格率的百分数从高到低顺序

SELECT t.C# AS 课程号,max(course.Cname)AS 课程名,isnull(AVG(score),0) AS 平均成绩

,100 * SUM(CASE WHEN isnull(score,0)>=60 THEN 1 ELSE 0 END)/COUNT(*) AS 及格百分数

FROM SC T,Course 

WHERE t.C#=course.C# 

GROUP BY t.C# 

ORDER BY 100 * SUM(CASE WHEN isnull(score,0)>=60 THEN 1 ELSE 0 END)/COUNT(*) DESC 

20、查询如下课程平均成绩和及格率的百分数(用"1行"显示): 企业管理（），马克思（），OO&UML （），数据库（）

SELECT SUM(CASE WHEN C# ='001' THEN score ELSE 0 END)/SUM(CASE C# WHEN '001' THEN 1 ELSE 0 END) AS 企业管理平均分

,100 * SUM(CASE WHEN C# = '001' AND score >= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN C# = '001' THEN 1 ELSE 0 END) AS 企业管理及格百分数

,SUM(CASE WHEN C# = '002' THEN score ELSE 0 END)/SUM(CASE C# WHEN '002' THEN 1 ELSE 0 END) AS 马克思平均分

,100 * SUM(CASE WHEN C# = '002' AND score >= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN C# = '002' THEN 1 ELSE 0 END) AS 马克思及格百分数

,SUM(CASE WHEN C# = '003' THEN score ELSE 0 END)/SUM(CASE C# WHEN '003' THEN 1 ELSE 0 END) AS UML平均分

,100 * SUM(CASE WHEN C# = '003' AND score >= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN C# = '003' THEN 1 ELSE 0 END) AS UML及格百分数

,SUM(CASE WHEN C# = '004' THEN score ELSE 0 END)/SUM(CASE C# WHEN '004' THEN 1 ELSE 0 END) AS 数据库平均分

,100 * SUM(CASE WHEN C# = '004' AND score >= 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN C# = '004' THEN 1 ELSE 0 END) AS 数据库及格百分数

FROM SC 

21、查询不同老师所教不同课程平均分从高到低显示

SELECT max(Z.T#) AS 教师ID,MAX(Z.Tname) AS 教师姓名,C.C# AS 课程ＩＤ,MAX(C.Cname) AS 课程名称,AVG(Score) AS 平均成绩

FROM SC AS T,Course AS C ,Teacher AS Z 

WHERE T.C#=C.C# AND C.T#=Z.T# 

GROUP BY C.C# 

ORDER BY AVG(Score) DESC 

22、查询如下课程成绩第3 名到第6 名的学生成绩单：企业管理（），马克思（），UML （），数据库（）

[学生ID],[学生姓名],企业管理,马克思,UML,数据库,平均成绩

SELECT DISTINCT top 3 

SC.S# As 学生学号, 

Student.Sname AS 学生姓名, 

T1.score AS 企业管理, 

T2.score AS 马克思, 

T3.score AS UML, 

T4.score AS 数据库, 

ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) as 总分

FROM Student,SC LEFT JOIN SC AS T1 

ON SC.S# = T1.S# AND T1.C# = '001' 

LEFT JOIN SC AS T2 

ON SC.S# = T2.S# AND T2.C# = '002' 

LEFT JOIN SC AS T3 

ON SC.S# = T3.S# AND T3.C# = '003' 

LEFT JOIN SC AS T4 

ON SC.S# = T4.S# AND T4.C# = '004' 

WHERE student.S#=SC.S# AND 

ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) 

NOT IN 

(SELECT 

DISTINCT 

TOP 15 WITH TIES 

ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) 

FROM sc 

LEFT JOIN sc AS T1 

ON sc.S# = T1.S# AND T1.C# = 'k1' 

LEFT JOIN sc AS T2 

ON sc.S# = T2.S# AND T2.C# = 'k2' 

LEFT JOIN sc AS T3 

ON sc.S# = T3.S# AND T3.C# = 'k3' 

LEFT JOIN sc AS T4 

ON sc.S# = T4.S# AND T4.C# = 'k4' 

ORDER BY ISNULL(T1.score,0) + ISNULL(T2.score,0) + ISNULL(T3.score,0) + ISNULL(T4.score,0) DESC); 



23、统计列印各科成绩,各分数段人数:课程ID,课程名称,[100-85],[85-70],[70-60],[ <60] 

SELECT SC.C# as 课程ID, Cname as 课程名称

,SUM(CASE WHEN score BETWEEN 85 AND 100 THEN 1 ELSE 0 END) AS [100 - 85] 

,SUM(CASE WHEN score BETWEEN 70 AND 85 THEN 1 ELSE 0 END) AS [85 - 70] 

,SUM(CASE WHEN score BETWEEN 60 AND 70 THEN 1 ELSE 0 END) AS [70 - 60] 

,SUM(CASE WHEN score < 60 THEN 1 ELSE 0 END) AS [60 -] 

FROM SC,Course 

WHERE SC.C#=Course.C# 

GROUP BY SC.C#,Cname; 


24、查询学生平均成绩及其名次

SELECT 1+(SELECT COUNT( distinct 平均成绩) 

FROM (SELECT S#,AVG(score) AS 平均成绩

FROM SC 

GROUP BY S# 

) AS T1 

WHERE 平均成绩> T2.平均成绩) as 名次, 

S# as 学生学号,平均成绩

FROM (SELECT S#,AVG(score) 平均成绩

FROM SC 

GROUP BY S# 

) AS T2 

ORDER BY 平均成绩desc; 

25、查询各科成绩前三名的记录:(不考虑成绩并列情况) 

SELECT t1.S# as 学生ID,t1.C# as 课程ID,Score as 分数

FROM SC t1 

WHERE score IN (SELECT TOP 3 score 

FROM SC 

WHERE t1.C#= C# 

ORDER BY score DESC 

) 

ORDER BY t1.C#;  


26、查询每门课程被选修的学生数

SELECT c#,count(S#) FROM sc GROUP BY C#; 


27、查询出只选修了一门课程的全部学生的学号和姓名

SELECT SC.S#,Student.Sname,count(C#) AS 选课数

FROM SC ,Student 

WHERE SC.S#=Student.S# GROUP BY SC.S# ,Student.Sname having count(C#)=1; 


28、查询男生、女生人数

SELECT count(Ssex) as 男生人数FROM Student GROUP BY Ssex having Ssex='男'; 

SELECT count(Ssex) as 女生人数FROM Student GROUP BY Ssex having Ssex='女'；


29、查询姓“张”的学生名单

SELECT Sname FROM Student WHERE Sname like '张%'; 


30、查询同名同性学生名单，并统计同名人数

SELECT Sname,count(*) FROM Student GROUP BY Sname having count(*)>1;; 


31、年出生的学生名单(注：Student表中Sage列的类型是datetime) 

SELECT Sname, CONVERT(char (11),DATEPART(year,Sage)) as age 

FROM student 

WHERE CONVERT(char(11),DATEPART(year,Sage))='1981'; 


32、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列

SELECT C#,Avg(score) FROM SC GROUP BY C# ORDER BY Avg(score),C# DESC ; 


33、查询平均成绩大于的所有学生的学号、姓名和平均成绩

SELECT Sname,SC.S# ,avg(score) 

FROM Student,SC 

WHERE Student.S#=SC.S# GROUP BY SC.S#,Sname having avg(score)>85; 

34、查询课程名称为“数据库”，且分数低于的学生姓名和分数

SELECT Sname,isnull(score,0) 

FROM Student,SC,Course 

WHERE SC.S#=Student.S# AND SC.C#=Course.C# AND Course.Cname='数据库'and score <60; 

35、查询所有学生的选课情况；

SELECT SC.S#,SC.C#,Sname,Cname 

FROM SC,Student,Course 

WHERE SC.S#=Student.S# AND SC.C#=Course.C# ; 

36、查询任何一门课程成绩在分以上的姓名、课程名称和分数；

SELECT distinct student.S#,student.Sname,SC.C#,SC.score 

FROM student,Sc 

WHERE SC.score>=70 AND SC.S#=student.S#; 

37、查询不及格的课程，并按课程号从大到小排列

SELECT c# FROM sc WHERE scor e <60 ORDER BY C# ; 

38、查询课程编号为且课程成绩在分以上的学生的学号和姓名；

SELECT SC.S#,Student.Sname FROM SC,Student WHERE SC.S#=Student.S# AND Score>80 AND C#='003'; 

39、求选了课程的学生人数

SELECT count(*) FROM sc; 

40、查询选修“叶平”老师所授课程的学生中，成绩最高的学生姓名及其成绩

SELECT Student.Sname,score 

FROM Student,SC,Course C,Teacher 

WHERE Student.S#=SC.S# AND SC.C#=C.C# AND C.T#=Teacher.T# AND Teacher.Tname='叶平' AND SC.score=(SELECT max(score)FROM SC WHERE C#=C.C# ); 

41、查询各个课程及相应的选修人数

SELECT count(*) FROM sc GROUP BY C#; 

42、查询不同课程成绩相同的学生的学号、课程号、学生成绩

SELECT distinct A.S#,B.score FROM SC A ,SC B WHERE A.Score=B.Score AND A.C# <>B.C# ; 

43、查询每门功成绩最好的前两名

SELECT t1.S# as 学生ID,t1.C# as 课程ID,Score as 分数

FROM SC t1 

WHERE score IN (SELECT TOP 2 score 

FROM SC 

WHERE t1.C#= C# 

ORDER BY score DESC 

) 

ORDER BY t1.C#; 

44、统计每门课程的学生选修人数（超过人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，查询结果按人数降序排列，若人数相同，按课程号升序排列 

SELECT C# as 课程号,count(*) as 人数

FROM sc 

group by C# 

order by count(*) desc,c# 

45、检索至少选修两门课程的学生学号

SELECT S# 

FROM sc 

group by s# 

having count(*) > = 2 

46、查询全部学生都选修的课程的课程号和课程名

SELECT C#,Cname 

FROM Course 

WHERE C# in (SELECT c# FROM sc group by c#) 

47、查询没学过“叶平”老师讲授的任一门课程的学生姓名

SELECT Sname FROM Student WHERE S# not in (SELECT S# FROM Course,Teacher,SC WHERE Course.T#=Teacher.T# AND SC.C#=course.C# AND Tname='叶平'); 

48、查询两门以上不及格课程的同学的学号及其平均成绩

SELECT S#,avg(isnull(score,0)) FROM SC WHERE S# in (SELECT S# FROM SC WHERE score <60 GROUP BY S# having count(*)>2)GROUP BY S#; 

49、检索“”课程分数小于，按分数降序排列的同学学号

SELECT S# FROM SC WHERE C#='004'and score <60 ORDER BY score desc; 

50、删除“”同学的“”课程的成绩

delete FROM Sc WHERE S#='001'and C#='001'
{% endhighlight %}

---